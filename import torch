import torch
import torch.nn as nn
import torch.nn.functional as F

# ------------------------
# Token + Positional Embeddings
# ------------------------
class Embeddings(nn.Module):
    def __init__(self, vocab_size, d_model, max_len):
        super().__init__()
        # Each word (represented as a number) becomes a vector of size d_model
        self.token_embeddings = nn.Embedding(vocab_size, d_model)
        # Each position (first word, second word, etc.) also gets its own vector
        self.position_embeddings = nn.Embedding(max_len, d_model)

    def forward(self, x):
        # Create position numbers for each word in the sentence (0,1,2,...)
        positions = torch.arange(0, x.size(1), device=x.device).unsqueeze(0)
        # Add word meaning (token) + position info together
        return self.token_embeddings(x) + self.position_embeddings(positions)

# ------------------------
# Multi-Head Attention
# ------------------------
class MultiHeadAttention(nn.Module):
    def __init__(self, d_model, num_heads):
        super().__init__()
        # Split the hidden size into several "heads" so the model can focus on different things
        assert d_model % num_heads == 0, "d_model must be divisible by num_heads"
        self.d_k = d_model // num_heads
        self.num_heads = num_heads

        # Layers that prepare queries (what I want), keys (what I have), and values (information)
        self.q_linear = nn.Linear(d_model, d_model)
        self.k_linear = nn.Linear(d_model, d_model)
        self.v_linear = nn.Linear(d_model, d_model)

        # After attention, combine all heads back together
        self.fc = nn.Linear(d_model, d_model)

    def forward(self, q, k, v, mask=None):
        B, T, D = q.size()  # B = batch, T = sentence length, D = hidden size

        # Make queries, keys, and values, and split into multiple heads
        q = self.q_linear(q).view(B, T, self.num_heads, self.d_k).transpose(1, 2)
        k = self.k_linear(k).view(B, T, self.num_heads, self.d_k).transpose(1, 2)
        v = self.v_linear(v).view(B, T, self.num_heads, self.d_k).transpose(1, 2)

        # Compare queries with keys to decide which words should pay attention to others
        scores = (q @ k.transpose(-2, -1)) / (self.d_k ** 0.5)
        if mask is not None:
            scores = scores.masked_fill(mask == 0, -1e9)  # block unwanted positions
        attn = F.softmax(scores, dim=-1)  # Convert to probabilities

        # Use those attention scores to mix the values (information)
        out = attn @ v

        # Put the heads back together into one vector
        out = out.transpose(1, 2).contiguous().view(B, T, D)
        return self.fc(out)

# ------------------------
# Feed Forward Network
# ------------------------
class FeedForward(nn.Module):
    def __init__(self, d_model, d_ff):
        super().__init__()
        # A simple 2-layer network that helps process the information
        self.net = nn.Sequential(
            nn.Linear(d_model, d_ff),
            nn.ReLU(),
            nn.Linear(d_ff, d_model)
        )

    def forward(self, x):
        return self.net(x)

# ------------------------
# Transformer Block
# ------------------------
class TransformerBlock(nn.Module):
    def __init__(self, d_model, num_heads, d_ff):
        super().__init__()
        # Attention layer (words look at each other)
        self.attn = MultiHeadAttention(d_model, num_heads)
        # Extra small network for further processing
        self.ff = FeedForward(d_model, d_ff)

        # Normalization keeps numbers stable during training
        self.ln1 = nn.LayerNorm(d_model)
        self.ln2 = nn.LayerNorm(d_model)

    def forward(self, x, mask=None):
        # First, do attention (words share info with each other)
        x = x + self.attn(self.ln1(x), self.ln1(x), self.ln1(x), mask)
        # Then, process further with the feed forward network
        x = x + self.ff(self.ln2(x))
        return x

# ------------------------
# GPT-like Model
# ------------------------
class MiniGPT(nn.Module):
    def __init__(self, vocab_size, d_model=256, num_heads=8, d_ff=512, num_layers=4, max_len=512):
        super().__init__()
        # Step 1: Convert words into vectors + add positions
        self.embed = Embeddings(vocab_size, d_model, max_len)

        # Step 2: Pass words through several transformer blocks
        self.blocks = nn.ModuleList([
            TransformerBlock(d_model, num_heads, d_ff) for _ in range(num_layers)
        ])

        # Step 3: Normalize results and output predictions
        self.ln = nn.LayerNorm(d_model)
        self.fc_out = nn.Linear(d_model, vocab_size)

    def forward(self, x, mask=None):
        # Convert words into embeddings (meaning + position)
        x = self.embed(x)
        # Run through each transformer block
        for block in self.blocks:
            x = block(x, mask)
        # Normalize and make predictions for the next word
        x = self.ln(x)
        return self.fc_out(x)

# ------------------------
# Example Usage
# ------------------------

# Suppose we have a dictionary of 10,000 words
vocab_size = 10000
model = MiniGPT(vocab_size)

# Example input: 2 sentences, each with 10 words (randomly chosen for demo)
x = torch.randint(0, vocab_size, (2, 10))

# Forward pass: predicts the next word for each position
logits = model(x)
print("Logits shape:", logits.shape)  # (batch, sentence_length, vocab_size)

# ------------------------
# Step-by-Step Explanation with Example
# ------------------------
# Imagine the input is: "I like cats"
# 1. Each word is turned into a number: e.g., I=45, like=120, cats=300
# 2. Each number is converted into a vector (word embedding)
# 3. Position info is added (so the model knows which is 1st, 2nd, 3rd)
# 4. Attention compares words to see how they relate ("like" connects strongly to "cats")
# 5. The feed forward network refines the understanding
# 6. Stacking blocks repeats this process for better meaning
# 7. Final output is predictions for the next word (e.g., after "I like cats", model might predict "a lot")
